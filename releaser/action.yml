name: 'Releaser'
description: 'Release automation action'
inputs:
  token:
    description: Personal access token
    required: false
    default: ${{ github.token }}
  goreleaser_key:
    description: GoReleaser Pro license key
    required: false
  cosign_pwd:
    description: Password to decrypt signing key
    required: false
  docker_username:
    description: Docker username
    required: false
  docker_password:
    description: Docker password
    required: false
  schema-path:
    description: Path to version schema. Will run standalone, and only if specified.
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ inputs.token }}
        fetch-depth: 0
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.16'
    - run: |
        git config --global user.email "60093411+ory-bot@users.noreply.github.com"
        git config --global user.name "ory-bot"
      shell: bash
    - run: echo 'GOPATH='"$(go env GOPATH)" >> $GITHUB_ENV
      shell: bash
    - if: ${{ inputs.schema-path != 'false' }}
      run: |
        x=(${GITHUB_REPOSITORY//// })
        repo="${x[1]}"

        bash <(curl https://raw.githubusercontent.com/ory/meta/master/install.sh) -b $GOPATH/bin ory
        ory dev schema render-version $repo $GITHUB_REF_NAME ${{ inputs.schema-path }}

        branch="$(date +%s)"
        git fetch origin
        git stash || true
        git checkout -b "$branch"
        git stash pop || true
        git add -A
        git commit -a -m "autogen: add $GITHUB_REF_NAME to version.schema.json" || true
        git pull origin master --rebase || true
        git push origin HEAD:master || true
      shell: bash
    - if: ${{ inputs.schema-path == 'false' }}
      run: |
        if [[ ! -e package.json ]]; then
          echo '{"private": true, "version": "0.0.0"}' > package.json
          git add package.json
        else
          echo "package.json exists and needs not be written"
        fi

        echo 'notes='"$(mktemp).md" >> $GITHUB_ENV
      shell: bash
    - uses: actions/checkout@v2
      if: ${{ inputs.schema-path == 'false' }}
      with:
        repository: ory/changelog
        path: changelog
        token: ${{ inputs.token }}

    - if: ${{ inputs.schema-path == 'false' }}
      env:
        CURRENT_TAG: ${{ github.ref_name }}
      run: |
        npm --no-git-tag-version version "$CURRENT_TAG"

        (
          cd "$GITHUB_WORKSPACE/changelog";
          npm i
        )

        npx conventional-changelog-cli@v2.1.1 --config "changelog/index.js" -r 2 -o "$notes"

        if [[ "$OSTYPE" == "darwin"* ]]; then
          sed -i '' '/^# /d' "$notes"
        else
          sed -i '/^# /d' "$notes"
        fi

        npx prettier -w "$notes"
        git reset --hard HEAD
      shell: bash

    - if: ${{ inputs.schema-path == 'false' }}
      uses: docker/setup-qemu-action@v1
    - if: ${{ inputs.schema-path == 'false' }}
      uses: docker/setup-buildx-action@v1

    - if: ${{ inputs.schema-path == 'false' }}
      env:
        GORELEASER_CURRENT_TAG: ${{ github.ref_name }}
        GORELEASER_KEY: ${{ inputs.goreleaser_key }}
        GITHUB_TOKEN: ${{ inputs.token }}
        COSIGN_PWD: ${{ inputs.cosign_pwd }}
        DOCKER_USERNAME: ${{ inputs.docker_username }}
        DOCKER_PASSWORD: ${{ inputs.docker_password }}
      run: |
        cat "$notes"
        # clean up ory/changelog checkout
        rm -rf changelog

        docker pull --platform linux/amd64 oryd/xgoreleaser:latest
        docker run --privileged --mount type=bind,source="$(pwd)",target=/project \
            --mount type=bind,source="$notes",target=/notes.md \
            --platform linux/amd64 \
            -e GORELEASER_KEY \
            -e GITHUB_TOKEN \
            -e COSIGN_PWD \
            -e DOCKER_USERNAME \
            -e DOCKER_PASSWORD \
            -e GORELEASER_CURRENT_TAG \
            -v /var/run/docker.sock:/var/run/docker.sock \
            oryd/xgoreleaser:latest release --release-header "/notes.md" --rm-dist --timeout 60m --parallelism 1

        git add -A
        git stash || true
        git checkout master || true
        git stash pop || true
        git commit -a -m "autogen: update release artifacts" || true
        git pull origin master --rebase || true
        git push origin HEAD:master || true
      shell: bash
